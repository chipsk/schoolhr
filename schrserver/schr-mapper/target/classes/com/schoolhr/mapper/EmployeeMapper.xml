<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.schoolhr.mapper.EmployeeMapper">
    <insert id="insert"></insert>
    <insert id="insertSelective">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userID != null">
                userID,
            </if>
            <if test="username != null">
                username,
            </if>
            <if test="userSex != null">
                userSex,
            </if>
            <if test="idCard != null">
                idCard,
            </if>
            <if test="politic != null">
                politic,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="basisSalary != null">
                basisSalary,
            </if>
            <if test="workstatus != null">
                workstatus,
            </if>
            <if test="e_mail != null">
                e_mail,
            </if>

            <if test="departmentid != null">
                departmentid,
            </if>
            <if test="joblevel != null">
                joblevel,
            </if>
            <if test="contractTime != null">
                contractTime,
            </if>
            <if test="beginworkDate != null">
                beginworkDate,
            </if>
            <if test="endworkDate != null">
                endworkDate,
            </if>
            <if test="birthday != null">
                birthday,
            </if>
            <if test="positionid != null">
                positionid,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userID != null">
                #{userID,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                #{username,jdbcType=VARCHAR},
            </if>
            <if test="userSex != null">
                #{userSex,jdbcType=CHAR},
            </if>
            <if test="idCard != null">
                #{idCard,jdbcType=VARCHAR},
            </if>
            <if test="politic != null">
                #{politic,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>
            <if test="basisSalary != null">
                #{basisSalary,jdbcType=INTEGER},
            </if>
            <if test="workstatus != null">
                #{workstatus,jdbcType=VARCHAR},
            </if>
            <if test="e_mail != null">
                #{e_mail,jdbcType=VARCHAR},
            </if>
            <if test="departmentid != null">
                #{departmentid,jdbcType=INTEGER},
            </if>
            <if test="joblevel != null">
                #{joblevel,jdbcType=VARCHAR},
            </if>
            <if test="contractTime != null">
                #{contractTime,jdbcType=DOUBLE},
            </if>
            <if test="beginworkDate != null">
                #{beginworkDate,jdbcType=DATE},
            </if>
            <if test="endworkDate != null">
                #{endworkDate,jdbcType=DATE},
            </if>

            <if test="birthday != null">
                #{birthday,jdbcType=DATE},
            </if>
            <if test="positionid != null">
                #{positionid,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <insert id="addEmps">
        insert into employee (userID, username,
        userSex, idCard, politic, phone,
        address, basisSalary, workstatus,
        e_mail, departmentid, joblevel, contractTime, beginworkDate,
        endworkDate, birthday, positionid)
        values
        <foreach collection="list" separator="," item="emp">
            (#{emp.userID,jdbcType=INTEGER}, #{emp.username,jdbcType=VARCHAR},
            #{emp.userSex,jdbcType=CHAR}, #{emp.idCard,jdbcType=VARCHAR}, #{emp.politic,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR}, #{emp.address,jdbcType=VARCHAR}, #{emp.basisSalary,jdbcType=INTEGER}, #{emp.workstatus,jdbcType=VARCHAR},
            #{emp.e_mail,jdbcType=VARCHAR}, #{emp.departmentid,jdbcType=VARCHAR}, #{emp.joblevel,jdbcType=VARCHAR},
            #{emp.contractTime,jdbcType=DOUBLE}, #{emp.beginworkDate,jdbcType=DATE}, #{emp.endworkDate,jdbcType=DATE},
            #{emp.birthday,jdbcType=DATE}, #{emp.positionid,jdbcType=INTEGER})
        </foreach>
    </insert>
    <update id="updateByPrimaryKeySelective">
        update employee
        <set>
            <if test="userID != null">
                userID = #{userID,jdbcType=VARCHAR},
            </if>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="userSex != null">
                userSex = #{userSex,jdbcType=CHAR},
            </if>
            <if test="idCard != null">
                idCard = #{idCard,jdbcType=VARCHAR},
            </if>
            <if test="politic != null">
                politic = #{politic,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="basisSalary != null">
                basisSalary = #{basisSalary,jdbcType=INTEGER},
            </if>
            <if test="workstatus != null">
                workstatus = #{workstatus,jdbcType=VARCHAR},
            </if>
            <if test="e_mail != null">
                e_mail = #{e_mail,jdbcType=VARCHAR},
            </if>
            <if test="departmentid != null">
                departmentid = #{departmentid,jdbcType=INTEGER},
            </if>
            <if test="joblevel != null">
                joblevel = #{joblevel,jdbcType=VARCHAR},
            </if>
            <if test="contractTime != null">
                contractTime = #{contractTime,jdbcType=DOUBLE},
            </if>
            <if test="beginworkDate != null">
                beginworkDate = #{beginworkDate,jdbcType=DATE},
            </if>
            <if test="endworkDate != null">
                endworkDate = #{endworkDate,jdbcType=DATE},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="positionid != null">
                positionid = #{positionid,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey"></update>
    <update id="updateEmployeeSalaryById"></update>
    <delete id="deleteByPrimaryKey">
        delete from employee
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <select id="selectByPrimaryKey" resultType="com.schoolhr.model.Employee"></select>
    <select id="getEmployeeByPage" resultType="com.schoolhr.model.Employee">
        select e.*,d.`id` as did,d.`name` as dname,pos.`id` as posid,pos.`name` as posname from employee e,department d,position pos where e.`departmentid`=d.`id` and e.`positionid`=pos.`id`
        <if test="emp.username !=null and emp.username!=''">
            and e.username like concat('%',#{emp.username},'%')
        </if>
        <if test="emp.politic !=null">
            and e.politic =#{emp.politic}
        </if>
        <if test="emp.dname !=null">
            and d.name =#{emp.dname}
        </if>
        <if test="emp.joblevel !=null">
            and e.joblevel =#{emp.joblevel}
        </if>
        <if test="emp.posname !=null">
            and pos.name =#{emp.posname}
        </if>
        <if test="beginDateScope !=null">
            and e.beginDate between #{beginDateScope[0]} and #{beginDateScope[1]}
        </if>
        <if test="page !=null and size!=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="getTotal" resultType="java.lang.Long">
        select count(*) from employee e
        <where>
            <if test="emp!=null">
                <if test="emp.username !=null and emp.username!=''">
                    and e.username like concat('%',#{emp.username},'%')
                </if>
            </if>
            <if test="beginDateScope !=null">
                and e.beginworkDate between #{beginDateScope[0]} and #{beginDateScope[1]}
            </if>
        </where>
    </select>
    <select id="getEmployeeById" resultType="com.schoolhr.model.Employee">
        select e.*,d.`id` as did,d.`name` as dname,pos.`id` as posid,pos.`name` as posname from employee e,department d,position pos where
        e.`departmentid`=d.`id` and e.`positionid`=pos.`id` and e.`id`=#{id}
    </select>
    <select id="getEmployeeByPageSalary" resultType="com.schoolhr.model.Employee">
        SELECT e.*,d.`name` AS dname,s.id AS sid,s.`accumulationFundBase` AS saccumulationFundBase,s.`accumulationFundPer` AS saccumulationFundPer,
               s.`allSalary` AS sallSalary,s.basisSalary AS sbasisSalary,s.`bonus` AS sbonus,s.`createDate` AS screateDate,s.`lunchSalary` AS
                   slunchSalary,s.`medicalBase` AS smedicalBase,s.`medicalPer` AS smedicalPer,s.`name` AS sname,s.`socialBase` AS
                   ssocialBase,s.`socialPer` AS ssocialPer,s.`trafficSalary` AS strafficSalary
        FROM employee e LEFT JOIN empsalary es on e.id=es.eid LEFT JOIN salaryaccount s on es.sid = s.id LEFT JOIN department d on e.departmentid=d.id
        order by e.id
        <if test="page !=null and size !=null">
            limit #{page},#{size}
        </if>
    </select>
    <select id="maxuserID" resultType="java.lang.Integer">
        select max(userID) from employee
    </select>
</mapper>